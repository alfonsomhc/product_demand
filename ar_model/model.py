"""
model.py
"""
import os
from joblib import load

import mlops.logger as logger

logging = logger.get_logger("model")

_model_name = "ar_model.joblib"


class ModelException(Exception):
    """
    This exception should be raised when there are errors.
    """

    pass


def _load_model(folder_path):
    """
    Load a model artifact
    Input:
        - folder path (string) that contains model artifact
    Output:
        - model: model object required by `predict`.
    """
    source_path = os.path.join(folder_path, _model_name)
    try:
        model = load(source_path)
    except Exception as error:
        error_type = type(error).__name__
        error_message = f"Could not load model. {error_type}: {error}"
        logging.error(error_message)
        raise ModelException(error_message)
    logging.info(f"Read model {model=} from {source_path=}")
    return model


def initialization(folder_path):
    """
    Initialize objects required by `predict`.

    Input:
        - folder path (string) that contains model artifacts

    Output: object required by `predict`
    """
    model = _load_model(folder_path)
    return model


def _validate_input(data):
    """
    Validate features sent by prediction or training service API.
    Generate ModelDataValidation with a useful message for the user.
    """
    if not isinstance(data, dict):
        raise ModelException("Data should be a dictionary")
    if not "n_weeks" in data.keys():
        raise ModelException("Input dictionary should have a key 'n_weeks'")
    if not isinstance(data["n_weeks"], int):
        raise ModelException("Parameter 'n_weeks' should be an int")
    if data["n_weeks"] <= 0:
        raise ModelException("Parameter 'n_weeks' should be >= 0")


def _process(data_dict):
    """
    Transform data provided by the prediction service into the data
    expected by the model.
    """
    return data_dict["n_weeks"]


def predict(data_dict, init_object):
    """
    Predict data provided to the service

    Inputs:
        - data_dict: data (dictionary)
        - init_object: tuple (model, data_size (int))
    Output:
        - prediction generated by the model, list of dicts and suitable to be
            returned by a web api (should be jsonifiable)

    """
    model_fit, data_size = init_object
    _validate_input(data_dict)
    n_weeks = _process(data_dict)
    prediction = (
        model_fit.predict(start=data_size, end=data_size + n_weeks - 1)
        .to_frame()
        .reset_index()
        .rename(columns={"index": "date", 0: "prediction"})
        .assign(date=lambda x: x.date.apply(lambda z: z.strftime("%Y-%m-%d")))
        .to_dict(orient="records")
    )
    logging.info(f"Prediction for {n_weeks=} was {prediction=}")
    return prediction
